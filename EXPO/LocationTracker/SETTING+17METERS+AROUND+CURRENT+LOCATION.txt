import React, { useState, useEffect } from "react";
import { View, Text, StyleSheet, ActivityIndicator } from "react-native";
import MapView, { Marker, Polygon } from "react-native-maps";
import * as Location from "expo-location";

export default function App() {
  const [location, setLocation] = useState(null);
  const [errorMsg, setErrorMsg] = useState(null);
  const [region, setRegion] = useState(null);
  const [polygonCoords, setPolygonCoords] = useState([]);

  useEffect(() => {
    (async () => {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== "granted") {
        setErrorMsg("Permission to access location was denied");
        return;
      }

      let loc = await Location.getCurrentPositionAsync({});
      setLocation(loc.coords);
      setRegion({
        latitude: loc.coords.latitude,
        longitude: loc.coords.longitude,
        latitudeDelta: 0.01,
        longitudeDelta: 0.01,
      });

      // Define a rectangle around the user (0.00015 ≈ 16.65/17 meters) ---- 1 degree of latitude ≈ 111,000 meters.
      const boxSize = 0.00015;
      setPolygonCoords([
        { latitude: loc.coords.latitude + boxSize, longitude: loc.coords.longitude - boxSize }, // Top Left
        { latitude: loc.coords.latitude + boxSize, longitude: loc.coords.longitude + boxSize }, // Top Right
        { latitude: loc.coords.latitude - boxSize, longitude: loc.coords.longitude + boxSize }, // Bottom Right
        { latitude: loc.coords.latitude - boxSize, longitude: loc.coords.longitude - boxSize }, // Bottom Left
      ]);

      Location.watchPositionAsync(
        {
          accuracy: Location.Accuracy.Highest,
          timeInterval: 5000,
          distanceInterval: 1,
        },
        (newLocation) => {
          setLocation(newLocation.coords);
          setRegion({
            latitude: newLocation.coords.latitude,
            longitude: newLocation.coords.longitude,
            latitudeDelta: 0.01,
            longitudeDelta: 0.01,
          });

          // Update Rectangle (Box) Position
          setPolygonCoords([
            { latitude: newLocation.coords.latitude + boxSize, longitude: newLocation.coords.longitude - boxSize }, // Top Left
            { latitude: newLocation.coords.latitude + boxSize, longitude: newLocation.coords.longitude + boxSize }, // Top Right
            { latitude: newLocation.coords.latitude - boxSize, longitude: newLocation.coords.longitude + boxSize }, // Bottom Right
            { latitude: newLocation.coords.latitude - boxSize, longitude: newLocation.coords.longitude - boxSize }, // Bottom Left
          ]);
        }
      );
    })();
  }, []);

  return (
    <View style={styles.container}>
      {region ? (
        <MapView
          style={styles.map}
          region={region}
          showsUserLocation={false} // Hide default blue circle
        >
          {/* Custom Marker for User */}
          {location && (
            <Marker
              coordinate={{
                latitude: location.latitude,
                longitude: location.longitude,
              }}
              title="You are here"
            />
          )}

          {/* Rectangle (Box) Around User */}
          {polygonCoords.length > 0 && (
            <Polygon
              coordinates={polygonCoords}
              strokeWidth={2}
              strokeColor="blue"
              fillColor="rgba(0, 0, 255, 0.3)" // Semi-transparent blue
            />
          )}
        </MapView>
      ) : (
        <ActivityIndicator size="large" color="#0000ff" />
      )}
      {errorMsg && <Text style={styles.error}>{errorMsg}</Text>}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  map: {
    width: "100%",
    height: "100%",
  },
  error: {
    fontSize: 18,
    color: "red",
    textAlign: "center",
    marginTop: 20,
  },
});
